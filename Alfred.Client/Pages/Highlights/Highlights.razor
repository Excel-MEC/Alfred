@page "/Events/Highlights"
@using Alfred.Client.Pages.Highlights.Components
@inject IHighlightRepository HighlightRepo


<AuthorizedView Role=@($"{Roles.Admin},{Roles.Core},{Roles.Editor}")>
    <div class="row">
        <div class="col-md-12 text-right mb-2">
            <RadzenButton Text="Add Highlight" Click="@(args => Dialog.Open<AddHighlight>("Add Highlight", null, new DialogOptions() {Width = "700px"}))"/>
            <RadzenButton Click="@(async () => await Reload(true))" Icon="cached" Style="margin-bottom: 20px; width: 80px"/>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="8"
                        AllowSorting="true" Data="@_highlights" TItem="Highlight">
                <Columns>
                    <RadzenGridColumn TItem="Highlight" Property="Id" Title="Id" width="70px"/>
                    <RadzenGridColumn TItem="Highlight" Property="Name" Title="Name"/>
                    <RadzenGridColumn TItem="Highlight" Property="Icon" Title="Icon" Filterable="false" Sortable="false">
                        <Template Context="data">
                            <RadzenImage Path="@data?.Image" style="max-height: 80px"/>
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Highlight" Property="Delete" Title="Delete" Filterable="false" Sortable="false" Width="70px">
                        <Template Context="data">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(async highlight => await ShowConfirmDialogue(data))">
                            </RadzenButton>
                        </Template>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </div>
    </div>
</AuthorizedView>

@if (_loading)
{
    <div class="spinner"></div>
}


@code {
    List<Highlight> _highlights = new List<Highlight>();
    bool _loading = false;

    async Task Reload(bool refresh = false)
    {
        _loading = true;
        _highlights = await State.GetHighlights(refresh);
        _loading = false;
    }

    async Task DeleteRow(Highlight highlight, DialogService ds)
    {
        _loading = true;
        ds.Close(true);
        await HighlightRepo.DeleteHighlight(highlight);
        _loading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await Reload();
        State.StateChanged += StateHasChanged;
    }

    async Task ShowConfirmDialogue(Highlight highlight) => await Dialog.OpenAsync("Alert", ds =>
        @<RadzenCard Style="padding: 20px;">
            <p Style="margin-bottom: 10px;">Are you sure you want to delete?</p>
            <div class="row">
                <div class="col-md-12">
                    <RadzenButton Text="Ok" Click="async () => await DeleteRow(highlight, ds)" Style="margin-bottom: 10px; width: 150px"/>
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px"/>
                </div>
            </div>
        </RadzenCard>);

}