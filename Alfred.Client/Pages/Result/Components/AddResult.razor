@using Alfred.Client.Dtos.Events
@using Alfred.Client.Dtos.Results
@inject IResultRepository ResultRepo

<AuthorizedView Role=@($"{Roles.Admin},{Roles.Core},{Roles.Editor}")>
    <RadzenTemplateForm Data="@_result" Submit="@(async (DataForAddingResultDto args) => { await Submit(args); })">
        <div class="row">
            <div class="col-md-12">
                <RadzenFieldset Text="Data">
                    
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Excel Id"/>
                        </div>
                        <div class="col-md-9">
                            <RadzenNumeric style="width:100%" @bind-Value="@_result.ExcelId" Placeholder="Enter Excel Id" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Name"/>
                        </div>
                        <div class="col-md-9">
                            <RadzenTextBox style="width: 100%;" @bind-value="@_result.Name"/>
                        </div>
                    </div>


                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Position"/>
                        </div>
                        <div class="col-md-9">
                            <RadzenNumeric style="width:100%" @bind-Value="@_result.Position" Placeholder="Enter Position"/>
                        </div>
                    </div>                
                    
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Team Id"/>
                        </div>
                        <div class="col-md-9">
                            <RadzenNumeric style="width:100%" @bind-Value="@_result.TeamId" Placeholder="Enter Team Id"/>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Team Name"/>
                        </div>
                        <div class="col-md-9">
                            <RadzenTextBox style="width: 100%;" @bind-value="@_result.TeamName"/>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Team Members"/>
                        </div>
                        <div class="col-md-9">
                            <RadzenTextBox style="width: 100%;" @bind-value="@_result.TeamMembers"/>
                        </div>
                    </div>

                    
                </RadzenFieldset>
                <div class="row justify-content-center">
                    <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                        <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save"/>
                        <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel"/>
                    </div>
                </div>
            </div>
        </div>

    </RadzenTemplateForm>

    @if (_loading)
    {
        <div class="spinner"></div>
    }
</AuthorizedView>

<style>
    .row{
        margin-top: 10px;
    }
</style>

@code{

    [Parameter]
    public int EventId { get; set; }
    DataForAddingResultDto _result = new DataForAddingResultDto();
    List<EventForListViewDto> _events = new List<EventForListViewDto>();
    bool _loading = true;
    protected override async Task OnInitializedAsync()
    {
        _events = await State.GetEventList();
        _loading = false;
    }


    async Task Submit(DataForAddingResultDto result)
    {
        _loading = true;
        try
        {
            result.EventId = EventId;
            await ResultRepo.AddResult(result);
            State.StateChanged.Invoke();
        }
        catch
        {
            Notification.Error("Somthing went wrong");
        }
        Cancel();
        _loading = false;
    }

    void Cancel()
    {
        _result = new DataForAddingResultDto();
        Dialog.Close();
    }


}